/*
Auth0r: Offensive-Panda
Designation: Offensive Security Researcher
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.ServiceProcess;
using System.Threading;
using System.Threading.Tasks;

namespace scsv
{

    [RunInstaller(true)]
    public partial class scsv : ServiceBase
    {

        Thread honey = null;
        public scsv()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            ThreadStart obj = new ThreadStart(Runme);
            honey = new Thread(obj);
            honey.Start();
        }

        public void Runme ()
        {

            string token = ""; // Add your telegram bot token here
            string chatid = ""; // Add telegram bot chatid 
            // Specify the event IDs to query
            var eventIds = new int[] { 1, 3, 11, 15, 22};
            // 11 is for file creation, 1 is for process ceation, 3 is for network, 15 filestreamcreation, 22 DNS query
            while (true)
            {
                Thread.Sleep(5000);
                var startT = DateTime.Now.AddSeconds(-10); // Set the start time to 5 seconds ago
                var endT = DateTime.Now; // Set the end time to the current time

                try
                {

                    // Open the event log and query desired events
                    using (EventLogReader log = new EventLogReader("Microsoft-Windows-Sysmon/Operational"))
                    {
                        for (EventRecord eventRecord = log.ReadEvent(); eventRecord != null; eventRecord = log.ReadEvent())
                        {
                            if (eventRecord.TimeCreated.Value >= startT && eventRecord.TimeCreated.Value <= endT
                                && eventIds.Contains(eventRecord.Id))
                            {
                                // Extract all event data and write to file
                                var eventData = eventRecord.FormatDescription();
                                SendMessageToTelegram(token, chatid, eventData);
                                var eventDataArray = eventData.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                                string targetFileName = null;
    
                                string sourceip = "";
                                foreach (var data in eventDataArray)
                                {

                                    try
                                    {

                                        if (data.StartsWith("TargetFilename"))
                                        {

                                            string[] parts = data.Split(':');
                                            targetFileName = string.Join(":", parts.Skip(1)).Trim();
                                            Console.WriteLine(targetFileName);
                                            UploadFileAsync(targetFileName).Wait();
                                            
                                        }

                                        if (data.Contains("SourceIp"))
                                        {
                                            sourceip = data;
                                        }

                                        if (data.Contains("DestinationPort: 3389"))
                                        {
                                            // Split the data into lines
                                            string[] lines = data.Split('\n');

                                            // Find the line that starts with "SourceIp:"
                                            string sourceIpLine = sourceip;
                                        
                                            if (sourceIpLine != null)
                                            {
                                                // Extract the source IP from the line
                                                string sourceIp = sourceIpLine.Split(':')[1].Trim();
                                                string  destinationPortLine = data;

                                                if (destinationPortLine != null)
                                                {
                                                    // Extract the source port from the line
                                                    string DestinationPort = destinationPortLine.Split(':')[1].Trim();
                                                    GetLocation(sourceIp).Wait();
                                                    

                                                    // Do something with the source IP and port number
                                                }
                                            }
                                        }
                                    }

                                    catch (Exception ex)
                                    {
                                        Console.WriteLine(ex.ToString());

                                    }

                                }

                            }
                        }

                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }

            }
        }

        public static async Task UploadFileAsync(string filePath)
        {
            var client = new HttpClient();
            try
            {
                using (var fileStream = File.OpenRead(filePath))
                {
                    using (var formData = new MultipartFormDataContent())
                    {
                        formData.Add(new StreamContent(fileStream), "fileToUpload", Path.GetFileName(fileStream.Name));

                        var response = await client.PostAsync("", formData);  // Enter URL here POST request to uplaod files on server.

                        if (response.IsSuccessStatusCode)
                        {
                            Console.WriteLine("File uploaded successfully.");
                        }
                        else
                        {
                            Console.WriteLine("File upload failed.");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

        public static async Task GetLocation(string ip)
        {
            string apiKey = "";  // API key generated from ipgeolocation.io, you need to create you account and add the api key here
            string token = "";   // your telegram bot token 
            string chatid = ""; // your chatid of telegram bot
            string apiUrl = $"https://api.ipgeolocation.io/ipgeo?apiKey={apiKey}&ip={ip}";

            using (var httpClient = new HttpClient())
            {
                try
                {
                    var response = await httpClient.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        var result = await response.Content.ReadAsStringAsync();
      
                        SendMessageToTelegram(token, chatid, result);
                    }
                    else
                    {
                        Console.WriteLine($"Error: {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }
        }

        public static void SendMessageToTelegram(string botToken, string chatId, string message)
        {
            var httpClient = new HttpClient();
            var url = $"https://api.telegram.org/bot{botToken}/sendMessage";
            var content = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("chat_id", chatId),
                 new KeyValuePair<string, string>("text", message)
        });
            var task = httpClient.PostAsync(url, content);
            task.Wait();
            var response = task.Result;
            response.EnsureSuccessStatusCode();
        }
    
        protected override void OnStop()
        {

            honey.Abort();

        }
    }

        
    }

